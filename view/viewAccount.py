# Form implementation generated from reading ui file 'viewAccount.ui'
#
# Created by: PyQt5 UI code generator 6.5.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

"""
**************************************************
@IDE    ：PyCharm
@Author ：Yuzhii0718,Apricityiii
@Update ：2023/12/7 12:55
**************************************************
"""

from PyQt5 import QtCore, QtGui, QtWidgets

import mysql.connector as mc
from PyQt5.QtWidgets import QMessageBox

from .adminInfo import get_admin_account, get_admin_password, log_status


class viewAccount_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(600, 400)
        font = QtGui.QFont()
        font.setFamily("华文中宋")
        font.setPointSize(12)
        Dialog.setFont(font)
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tableWidget = QtWidgets.QTableWidget(parent=Dialog)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(111)
        self.verticalLayout.addWidget(self.tableWidget)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_keyWords = QtWidgets.QLabel(parent=Dialog)
        self.label_keyWords.setObjectName("label_keyWords")
        self.horizontalLayout_2.addWidget(self.label_keyWords)
        self.lineEdit_keywords = QtWidgets.QLineEdit(parent=Dialog)
        self.lineEdit_keywords.setObjectName("lineEdit_keywords")
        self.horizontalLayout_2.addWidget(self.lineEdit_keywords)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.pushButton_view = QtWidgets.QPushButton(parent=Dialog)
        self.pushButton_view.setObjectName("pushButton_view")
        self.horizontalLayout.addWidget(self.pushButton_view)
        self.pushButton_search = QtWidgets.QPushButton(parent=Dialog)
        self.pushButton_search.setObjectName("pushButton_search")
        self.horizontalLayout.addWidget(self.pushButton_search)
        self.pushButton_disableAccount = QtWidgets.QPushButton(parent=Dialog)
        self.pushButton_disableAccount.setObjectName("pushButton_disableAccount")
        self.horizontalLayout.addWidget(self.pushButton_disableAccount)
        self.pushButton_enableAccount = QtWidgets.QPushButton(parent=Dialog)
        self.pushButton_enableAccount.setObjectName("pushButton_enableAccount")
        self.horizontalLayout.addWidget(self.pushButton_enableAccount)
        self.pushButton_delAccount = QtWidgets.QPushButton(parent=Dialog)
        self.pushButton_delAccount.setObjectName("pushButton_delAccount")
        self.horizontalLayout.addWidget(self.pushButton_delAccount)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.horizontalLayout)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        # 连接信号与槽
        self.pushButton_view.clicked.connect(self.select_data)
        self.pushButton_search.clicked.connect(self.search_data)
        self.pushButton_disableAccount.clicked.connect(self.disable_data)
        self.pushButton_enableAccount.clicked.connect(self.enable_data)
        self.pushButton_delAccount.clicked.connect(self.del_data)

    def select_data(self):
        dbname = "library"
        tablename = "tbl_addaccount"

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()
            if log_status() is False:
                QMessageBox.critical(self.pushButton_view, "错误", "请先登录！")
                QMessageBox.critical(self.pushButton_search, "错误", "请先登录！")
                return

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="library"
            )

            mycursor = mydatabase.cursor()
            mycursor.execute("select * from {}".format(tablename))
            myresult = mycursor.fetchall()
            self.tableWidget.setRowCount(len(myresult))
            for i in range(len(myresult)):
                for j in range(len(myresult[i])):
                    self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem(str(myresult[i][j])))

        except mc.Error as e:
            print("错误", e)
            QMessageBox.critical(self.pushButton_view, "错误", "数据库连接失败，请检查数据库名称是否正确！" + str(e))

    def search_data(self):
        dbname = "library"
        tablename = "tbl_addaccount"

        name = self.lineEdit_keywords.text()
        accountID = self.lineEdit_keywords.text()
        phone = self.lineEdit_keywords.text()
        email = self.lineEdit_keywords.text()

        # 如果没有输入关键字，弹出警告对话框
        if name == "" and accountID == "" and phone == "" and email == "":
            QMessageBox.warning(self.pushButton_search, "警告", "请输入关键字！")
            return

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()
            if log_status() is False:
                QMessageBox.critical(self.pushButton_view, "错误", "请先登录！")
                QMessageBox.critical(self.pushButton_search, "错误", "请先登录！")
                return

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="library"
            )

            # lineEdit_keywords 可以进行模糊查询，查询结果显示在 tableWidget 中
            mycursor = mydatabase.cursor()
            mycursor.execute(
                "select * from {} where name like '%{}%' or accountID like '%{}%' or phone like '%{}%' or email like '%{}%'".format(
                    tablename, name, accountID, phone, email))
            myresult = mycursor.fetchall()
            self.tableWidget.setRowCount(len(myresult))
            for i in range(len(myresult)):
                for j in range(len(myresult[i])):
                    self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem(str(myresult[i][j])))

            if myresult is None:
                QMessageBox.warning(self.pushButton_search, "警告", "没有找到相关账号！")
                return
            else:
                QMessageBox.information(self.pushButton_search, "提示", "查找成功！")
                return

        except Exception as e:
            print(e)
            QMessageBox.warning(self.pushButton_search, "警告", "发生错误！" + str(e))

    def disable_data(self):
        dbname = "library"
        tablename = "tbl_addaccount"

        name = self.lineEdit_keywords.text()
        accountID = self.lineEdit_keywords.text()
        phone = self.lineEdit_keywords.text()
        email = self.lineEdit_keywords.text()

        # 如果没有输入关键字，弹出警告对话框
        if name == "" and accountID == "" and phone == "" and email == "":
            QMessageBox.warning(self.pushButton_search, "警告", "请输入关键字！")
            return

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()
            if log_status() is False:
                QMessageBox.critical(self.pushButton_view, "错误", "请先登录！")
                return

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="library"
            )

            # lineEdit_keywords 输入编号
            mycursor = mydatabase.cursor()
            mycursor.execute(
                "select * from {} where accountID = '{}'".format(tablename, accountID))
            myresult = mycursor.fetchall()

            if myresult is None:
                QMessageBox.warning(self.pushButton_disableAccount, "警告", "没有找到相关书籍！")
                return
            else:
                # 将书籍状态设置为禁用 isAvail =0. 只查找accountID
                sql = "update {} set isAvail = 0 where accountID = '{}'".format(tablename, accountID)
                mycursor.execute(sql)
                mydatabase.commit()
                QMessageBox.information(self.pushButton_disableAccount, "提示", "禁用成功！")
                # 刷新 tableWidget
                self.search_data()
                return

        except Exception as e:
            print(e)
            QMessageBox.warning(self.pushButton_disableAccount, "警告", "发生错误！" + str(e))

    def enable_data(self):
        dbname = "library"
        tablename = "tbl_addaccount"

        name = self.lineEdit_keywords.text()
        accountID = self.lineEdit_keywords.text()
        phone = self.lineEdit_keywords.text()
        email = self.lineEdit_keywords.text()

        # 如果没有输入关键字，弹出警告对话框
        if name == "" and accountID == "" and phone == "" and email == "":
            QMessageBox.warning(self.pushButton_search, "警告", "请输入关键字！")
            return

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()
            if log_status() is False:
                QMessageBox.critical(self.pushButton_view, "错误", "请先登录！")
                return

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="library"
            )

            # lineEdit_keywords 输入编号
            mycursor = mydatabase.cursor()
            mycursor.execute(
                "select * from {} where accountID = '{}'".format(tablename, accountID))
            myresult = mycursor.fetchall()

            if myresult is None:
                QMessageBox.warning(self.pushButton_enableAccount, "警告", "没有找到相关书籍！")
                return
            else:
                # 将书籍状态设置为启用 isAvail =1. 只查找accountID
                sql = "update {} set isAvail = 1 where accountID = '{}'".format(tablename, accountID)
                mycursor.execute(sql)
                mydatabase.commit()
                QMessageBox.information(self.pushButton_enableAccount, "提示", "启用成功！")
                # 刷新 tableWidget
                self.search_data()
                return

        except Exception as e:
            print(e)
            QMessageBox.warning(self.pushButton_enableAccount, "警告", "发生错误！" + str(e))

    def del_data(self):
        dbname = "library"
        tablename = "tbl_addaccount"

        name = self.lineEdit_keywords.text()
        accountID = self.lineEdit_keywords.text()
        phone = self.lineEdit_keywords.text()
        email = self.lineEdit_keywords.text()

        # 如果没有输入关键字，弹出警告对话框
        if name == "" and accountID == "" and phone == "" and email == "":
            QMessageBox.warning(self.pushButton_search, "警告", "请输入关键字！")
            return

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()
            if log_status() is False:
                QMessageBox.critical(self.pushButton_view, "错误", "请先登录！")
                return

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="library"
            )

            # lineEdit_keywords 输入编号
            mycursor = mydatabase.cursor()
            mycursor.execute(
                "select * from {} where accountID like '%{}%'".format(tablename, accountID))  # 只查找accountID
            myresult = mycursor.fetchall()
            if myresult is None:
                QMessageBox.warning(self.pushButton_delAccount, "警告", "没有找到相关书籍！")
                return
            else:
                # 删除书籍，只查找accountID
                sql = "delete from {} where accountID = '{}'".format(tablename, accountID)
                mycursor.execute(sql)
                mydatabase.commit()
                QMessageBox.information(self.pushButton_delAccount, "提示", "删除成功！")
                # 刷新 tableWidget
                self.search_data()
                return

        except Exception as e:
            print(e)
            QMessageBox.warning(self.pushButton_delAccount, "警告", "发生错误！" + str(e))

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "姓名"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "编号"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "电话"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "邮箱"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "状态"))
        self.label_keyWords.setText(_translate("Dialog", "输入关键字"))
        self.pushButton_view.setText(_translate("Dialog", "显示全部"))
        self.pushButton_search.setText(_translate("Dialog", "查找"))
        self.pushButton_disableAccount.setText(_translate("Dialog", "禁用"))
        self.pushButton_enableAccount.setText(_translate("Dialog", "启用"))
        self.pushButton_delAccount.setText(_translate("Dialog", "删除"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = viewAccount_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec())
